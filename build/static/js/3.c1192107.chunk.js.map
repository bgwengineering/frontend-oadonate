{"version":3,"sources":["store/actions/auth/Dashboard.js","components/containers/dashboard/views/dashboard/donation/donationReceived/DonationReceived.js"],"names":["personalProfile","formValues","dispatch","getState","a","axiosInstance","post","tokenConfig","res","type","actionTypes","payload","data","response","detail","updatePersonalProfile","id","patch","stopSubmit","reset","fetchPersonalProfile","get","companyProfile","fetchCompanyProfile","fetchUserDonationsReceived","DonationReceived","useDispatch","user_donations_received","useSelector","state","userTypeReducer","useEffect","className","length","map","fund_type","fund_cash","fund_title","fund_category","fund_cash_amount","donations","donate_amount","donate_payment_method","donate_curency","user","donate_payment_status","donate_createdAt","first_name","last_name","email"],"mappings":"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","file":"static/js/3.c1192107.chunk.js","sourcesContent":["import axiosInstance from \"util/api\";\r\nimport { tokenConfig } from \"util/TokenConfig\";\r\nimport { stopSubmit, reset } from \"redux-form\";\r\n\r\nimport * as actionTypes from \"../ActionTypes\";\r\n\r\nexport const personalProfile = (formValues) => async (dispatch, getState) => {\r\n  try {\r\n    const res = await axiosInstance.post(\"/accounts/profile/personal\", { ...formValues }, tokenConfig(getState));\r\n    dispatch({\r\n      type: actionTypes.CREATE_PERSONAL_PROFILE_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n    // dispatch(stopSubmit(\"personalForm\"));\r\n    // dispatch(reset(\"personalForm\"));\r\n    dispatch({ type: actionTypes.SHOW_SUCCESS_MESSAGE, payload: \"Personal Profile Created\" });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: actionTypes.CREATE_PERSONAL_PROFILE_FAIL,\r\n    });\r\n    // dispatch(stopSubmit(\"personalForm\"));\r\n    // dispatch(reset(\"personalForm\"));\r\n    dispatch({ type: actionTypes.SHOW_ERROR_MESSAGE, payload: err.response.data.detail });\r\n  }\r\n};\r\n\r\n// update personal profile\r\nexport const updatePersonalProfile = (id, formValues) => async (dispatch, getState) => {\r\n  try {\r\n    const res = await axiosInstance.patch(`/accounts/profile/personal/${id}`, { ...formValues }, tokenConfig(getState));\r\n    dispatch({\r\n      type: actionTypes.UPDATE_PERSONAL_PROFILE_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n    dispatch(stopSubmit(\"editForm\"));\r\n    dispatch(reset(\"editForm\"));\r\n    dispatch({ type: actionTypes.SHOW_SUCCESS_MESSAGE, payload: \"Personal Profile updated\" });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: actionTypes.UPDATE_PERSONAL_PROFILE_FAIL\r\n    });\r\n    dispatch(stopSubmit(\"editForm\"));\r\n    dispatch(reset(\"editForm\"));\r\n    dispatch({ type: actionTypes.SHOW_ERROR_MESSAGE, payload:err.response.data.detail });\r\n  }\r\n};\r\n\r\n// fetch personal profile\r\nexport const fetchPersonalProfile = () => async (dispatch, getState) => {\r\n  try {\r\n    const res = await axiosInstance.get(\"/accounts/profile/personal\", tokenConfig(getState));\r\n    dispatch({\r\n      type: actionTypes.FETCH_PERSONAL_PROFILE_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: actionTypes.FETCH_PERSONAL_PROFILE_FAIL,\r\n    });\r\n    dispatch({ type: actionTypes.SHOW_ERROR_MESSAGE, payload: `Detail: ${error.response}` });\r\n  }\r\n};\r\n\r\n// create comapny profile\r\nexport const companyProfile = (formValues) => async (dispatch, getState) => {\r\n  try {\r\n    const res = await axiosInstance.post(\r\n      \"accounts/profile/company\",\r\n      { ...formValues },\r\n      tokenConfig(getState)\r\n    );\r\n    dispatch({\r\n      type: actionTypes.CREATE_COMPANY_PROFILE_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n    dispatch(stopSubmit(\"personalForm\"));\r\n    dispatch(reset(\"personalForm\"));\r\n    dispatch({ type: actionTypes.SHOW_SUCCESS_MESSAGE, payload: \"Company Profile Created\" });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: actionTypes.CREATE_COMPANY_PROFILE_FAIL,\r\n    });\r\n    dispatch(stopSubmit(\"companyForm\"));\r\n    dispatch(reset(\"companyForm\"));\r\n    dispatch({ type: actionTypes.SHOW_ERROR_MESSAGE, payload: err.response.data.detail });\r\n  }\r\n};\r\n\r\n// fetch company profile\r\n export const fetchCompanyProfile = () => async (dispatch, getState) => {\r\n  try {\r\n    const res = await axiosInstance.get(\"/accounts/profile/company\", tokenConfig(getState));\r\n    dispatch({\r\n      type: actionTypes.FETCH_COMPANY_PROFILE_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: actionTypes.FETCH_COMPANY_PROFILE_FAIL,\r\n    });\r\n    dispatch({ type: actionTypes.SHOW_ERROR_MESSAGE, payload: `Detail: ${error.response}` });\r\n  }\r\n};\r\n\r\n// fetch user donations received\r\n export const fetchUserDonationsReceived = () => async (dispatch, getState) => {\r\n  try {\r\n    const res = await axiosInstance.get(\"/accounts/user/fundraised\", tokenConfig(getState));\r\n    dispatch({\r\n      type: actionTypes.GET_USER_DONATIONS_RECEIVED,\r\n      payload: res.data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: actionTypes.GET_USER_DONATIONS_FAILED\r\n    });\r\n    dispatch({type: actionTypes.SHOW_ERROR_MESSAGE, payload: `Detail: ${error.response}` });\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CCard, CCardBody, CCol, CRow } from \"@coreui/react\";\nimport { fetchUserDonationsReceived } from 'store/actions/auth/Dashboard'\n\n\nconst DonationReceived = () => {\n  const dispatch = useDispatch();\n  const fundDonateState = useSelector((state) => state.userTypeReducer);\n  const { user_donations_received } = fundDonateState;\n\n  useEffect(() => {\n    dispatch(fetchUserDonationsReceived())\n  }, [])\n\n \n  return (\n    <>\n      <h4 className='text-uppercase text-center mb-4 mt-4'>Cash Donations Received</h4>\n      <CRow>\n        <CCol>\n          <CCard>\n            <CCardBody>\n              {/* table */}\n              <table className=\"table table-hover table-outline mb-0 d-sm-table\">\n                {/* table header */}\n                <thead className=\"thead-light\">\n                  <tr>\n                    <th className=\"text-center\">Fund Title</th>\n                    <th className=\"text-center\">Fund Amount</th>\n                    <th className=\"text-center\">Fund Category</th>\n                    <th className=\"text-center\">Donor's Name</th>\n                    <th className=\"text-center\">Donor's Email</th>\n                    <th className=\"text-center\">Amount donated</th>\n                    <th className=\"text-center\">payment method</th>\n                    <th className=\"text-center\">payment Status</th>\n                    <th className=\"text-center\">Date</th>\n                  </tr>\n                </thead>\n\n                {/* table body */}\n                <tbody>\n                  {user_donations_received.length ?\n                    user_donations_received.map(data => {\n                      const {\n                        fund_type,\n                        fund_cash,\n                        fund_title,\n                        fund_category,\n                        fund_cash_amount,             \n                      } = data;   \n                        return (\n                        <tr>\n                          <td className=\"text-center\">\n                            <div>{fund_title}</div>\n                          </td>\n                          <td className=\"text-center\">\n                            <div>{fund_cash_amount}</div>\n                          </td>\n                          <td className=\"text-center\">\n                            <div>{fund_category}</div>\n                          </td>\n                          {fund_cash.length && fund_cash.map(donations => {\n                               const {donate_amount, donate_curency,  donate_payment_method, user, donate_payment_status, donate_createdAt} = donations\n                                   const {first_name, last_name, email} = user\n                             return(\n                            <>\n                              <td className=\"text-center\">\n                              <div>{first_name + \" \" +  last_name}</div>\n                            </td>\n                            <td className=\"text-center\">\n                              <div>{email}</div>\n                            </td>\n                            <td className=\"text-center\">\n                              <div>{donate_amount}</div>\n                            </td>\n                            <td className=\"text-center\">\n                              <div>{donate_payment_method}</div>\n                            </td>\n                            <td className=\"text-center\">\n                              <div>{donate_payment_status}</div>\n                            </td>\n                            <td className=\"text-center\">\n                              <div>{donate_createdAt}</div>\n                            </td>\n                            </>\n                             )\n                          })}\n                        \n                        </tr>\n                      )\n                    }):\n                    <div>\n                      You have not recieved any donation on your Cash cause\n                    </div>\n                    }\n                </tbody>\n              </table>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n\n      {/* donation item */}\n      <h4 className='text-uppercase text-center mb-4 mt-4'>Item Donations Received</h4>\n      <CRow>\n        <CCol>\n          <CCard>\n            <CCardBody>\n              {/* table */}\n              <table className=\"table table-hover table-outline mb-0 d-sm-table\">\n                {/* table header */}\n                <thead className=\"thead-light\">\n                  <tr>\n                  <th className=\"text-center\">Fund Title</th>\n                    <th className=\"text-center\">Fund Amount</th>\n                    <th className=\"text-center\">Fund Category</th>\n                    <th className=\"text-center\">Donor's Name</th>\n                    <th className=\"text-center\">Donor's Email</th>\n                    <th className=\"text-center\">Amount donated</th>\n                    <th className=\"text-center\">Donation payment method</th>\n                    <th className=\"text-center\">Donation payment Status</th>\n                    <th className=\"text-center\">Donation Date</th>\n                    <th className=\"text-center\">Item Name</th>\n                    <th className='text-center'>Item Condition</th>\n                    <th className=\"text-center\">Value of Item to Cash</th>\n                  </tr>\n                </thead>\n\n                {/* table body */}\n                <tbody>\n                  {/* {user_donations_received.length ?\n                    user_donations_received.map(data => {\n                      const {\n                        fund_type,\n                        fund_item_sell,\n                        fund_title,\n                        fund_category,\n                        fund_cash_amount,             \n                      } = data;   \n                        return (\n                        <tr>\n                          <td className=\"text-center\">\n                            <div>{fund_title}</div>\n                          </td>\n                          <td className=\"text-center\">\n                            <div>{fund_cash_amount}</div>\n                          </td>\n                          <td className=\"text-center\">\n                            <div>{fund_category}</div>\n                          </td>\n                          {fund_item_sell.length && fund_item_sell.map(donations => {\n                               const {donate_amount, donate_curency,  donate_payment_method, user, donate_payment_status, donate_createdAt} = donations\n                                   const {first_name, last_name, email} = user\n                             return(\n                            <>\n                              <td className=\"text-center\">\n                              <div>{first_name + \" \" +  last_name}</div>\n                            </td>\n                            <td className=\"text-center\">\n                              <div>{email}</div>\n                            </td>\n                            <td className=\"text-center\">\n                              <div>{donate_amount}</div>\n                            </td>\n                            <td className=\"text-center\">\n                              <div>{donate_payment_method}</div>\n                            </td>\n                            <td className=\"text-center\">\n                              <div>{donate_payment_status}</div>\n                            </td>\n                            <td className=\"text-center\">\n                              <div>{donate_createdAt}</div>\n                            </td>\n                            </>\n                             )\n                          })}\n                        \n                        </tr>\n                      )\n                    }):\n                    <div>\n                      You have not recieved any donation for your Item cause\n                    </div>\n                    } */}\n                </tbody>\n              </table>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  );\n};\n\nexport default DonationReceived;\n"],"sourceRoot":""}